<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Joe's Blog</title>
    <description>A place where I can put anything in mind here to prevent being forgotten.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 24 Sep 2019 13:47:54 +0800</pubDate>
    <lastBuildDate>Tue, 24 Sep 2019 13:47:54 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Kafka vs Pulsar</title>
        <description>&lt;h1 id=&quot;kafka-vs-pulsar&quot;&gt;Kafka vs Pulsar&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is a note and also my personal understanding about these two mainly used message queue.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A artical talks about the difference between these two, you can click &lt;a href=&quot;https://kafkaesque.io/7-reasons-we-choose-apache-pulsar-over-apache-kafka/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Kafka stores all everthing in its log, which is append-only, while Pulsar stores its data in a distrubuted store service - Apache BookKeeper. The drawback of the way how Kafka handles log is that when the log file is really big, and the broker is down, if you are adding a new broker, the broker needs to sync data for the dead broker, it will takes a long time.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Becasuse of #1, Kafka’s broker is stateful and Pulsar’s broker is stateless as it does not contains any data inside. Pulsar can scale streamlessly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Kafka’s log can getting really big while Pulsar’s log won’t be that big because Pulsar will delete it is log.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Pulsar has two types of topics &lt;code class=&quot;highlighter-rouge&quot;&gt;persistent&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;non-persistent&lt;/code&gt;. The only difference between these two is about those messages that are not &lt;code class=&quot;highlighter-rouge&quot;&gt;ackownledged&lt;/code&gt; (Concusmer will acknowledge messages when it received). Which means all messages that are consumed will be deleted.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Kafka does not delete messages in topic after they are consumed.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;The drawback of Pulsar is you cannot add more consumer on-demand, as it will be deleted by broker.&lt;/strong&gt; This means you cannot use Pulsar in a &lt;code class=&quot;highlighter-rouge&quot;&gt;Event Sourcing&lt;/code&gt; architecture.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In general, both have their suitable scenario. For an &lt;code class=&quot;highlighter-rouge&quot;&gt;event sourcing&lt;/code&gt; architecure, Kafka is your choice.&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Sep 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/09/17/kafka-vs-pulsar/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/09/17/kafka-vs-pulsar/</guid>
        
        <category>message queue</category>
        
        
      </item>
    
      <item>
        <title>DDoS attack</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Talk about DDoS attack and ways to prevent it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;what-is-ddos-attack&quot;&gt;What is DDoS attack?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;In computing, a denial-of-service attack (DoS attack) is a cyber-attack in which the perpetrator seeks to make a machine or network resource unavailable to its intended users by temporarily or indefinitely disrupting services of a host connected to the Internet. Denial of service is typically accomplished by flooding the targeted machine or resource with superfluous requests in an attempt to overload systems and prevent some or all legitimate requests from being fulfilled&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While DDoS means &lt;code class=&quot;highlighter-rouge&quot;&gt;distributed denial-of-service attack&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;three-main-types-of-ddos-attack&quot;&gt;Three main types of DDoS attack&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Volumetric Attacks.
    &lt;ul&gt;
      &lt;li&gt;Attackers just send as many requests as they can to a single server, occupy all open ports of this server.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Application-Layer Attacks
    &lt;ul&gt;
      &lt;li&gt;Attackers send floods of requests to the application. Application is busy with these requests and not able to process other legitimate requests.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Protocol Attacks
    &lt;ul&gt;
      &lt;li&gt;Mainly like SYN flood, client sends syn to server, server reponses syn-ack, and waiting for the ack fromm client, which never happens.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;best-practicases-to-prevent-ddos-attack&quot;&gt;Best practicases to prevent DDoS attack&lt;/h2&gt;
</description>
        <pubDate>Thu, 29 Aug 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/08/29/DDOS-attack/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/08/29/DDOS-attack/</guid>
        
        <category>DDoS</category>
        
        
      </item>
    
      <item>
        <title>Steps to create ci/cd for dotnet core projects</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Steps to create ci/cd for dotnet core projects&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a note for what needs to be done to create &amp;amp; upload &amp;amp; deploy a project into kubernetes cluster&lt;/p&gt;

&lt;h2 id=&quot;prepare-base-images&quot;&gt;Prepare base images&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Prepare dotnet-core-runtime &amp;amp; dotnet-core-sdk base image. 
  modify corresponding &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; in the git repo&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Upload base images to artifactory which is done via a jenkins job.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;configure-jenkins-to-use-this-docker-template&quot;&gt;Configure Jenkins to use this docker template.&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/jenkins.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;prepare-your-ci-pipeline&quot;&gt;Prepare your &lt;code class=&quot;highlighter-rouge&quot;&gt;CI&lt;/code&gt; pipeline.&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Need to have a step named something like &lt;code class=&quot;highlighter-rouge&quot;&gt;containerize&lt;/code&gt; which is used to generate a docker image.&lt;/li&gt;
  &lt;li&gt;Need to have a step named something like &lt;code class=&quot;highlighter-rouge&quot;&gt;package&lt;/code&gt; which is used to generate helm chart. 
This will generate a chart which will be used for deploying&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;prepare-your-cd-pipeline&quot;&gt;Prepare your &lt;code class=&quot;highlighter-rouge&quot;&gt;CD&lt;/code&gt; pipeline.&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Optional&lt;/code&gt; Create a base chart and upload it to corresponding git repo&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 30 Jul 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/category/kubernetes</link>
        <guid isPermaLink="true">http://localhost:4000/category/kubernetes</guid>
        
        
        <category>kubernetes</category>
        
      </item>
    
      <item>
        <title>Best practice for writting unit tests</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Some thoughts for writting UT friendly code or how to write your unit test.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;1-do-not-rely-on-environment-for-your-unit-tests&quot;&gt;1. Do NOT rely on environment for your unit tests.&lt;/h2&gt;

&lt;p&gt;e.g. do not try to connect to a real database.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EMCUnityConnectorTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;_instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ConnectorInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Endpoint&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://10.148.9.40&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;UserName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;atom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PasswordHash&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;kasNMFdKC/+C/qwan3Eu7PT440byo8Lwe3dYKbWQgqQyz8dG3fD0bdSJi+87gdxO&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Guid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5B32CF84-F39E-4AE6-8447-508FBAF423F5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ConnectorTypeId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Guid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;89DB00D6-4F17-444E-A4EA-F527D6FFB390&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MockLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;_connector&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EMCUnityConnector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_connector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;[Fact]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ConnectTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;success&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_connector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2-field-injection-is-not-recommended&quot;&gt;2. Field injection is NOT recommended.&lt;/h2&gt;

&lt;p&gt;This means &lt;code class=&quot;highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt; annotation should not be applied to a field. Check more details via &lt;a href=&quot;https://stackoverflow.com/questions/39890849/what-exactly-is-field-injection-and-how-to-avoid-it&quot;&gt;this&lt;/a&gt; link.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doWork&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Use constructor instead&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doWork&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;If you are going to write a unit test for the &lt;code class=&quot;highlighter-rouge&quot;&gt;doWork&lt;/code&gt; method, you will not be able to mock the &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; without the help of Spring IoC container.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-follow-dependency-inversion-princple-strictly&quot;&gt;3. Follow &lt;code class=&quot;highlighter-rouge&quot;&gt;Dependency Inversion&lt;/code&gt; princple strictly.&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;High-level modules should not depend on low-level modules. Both should depend on abstractions (e.g. interfaces).&lt;/li&gt;
    &lt;li&gt;Abstractions should not depend on details. Details (concrete implementations) should depend on abstractions.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Which in general means, use &lt;code class=&quot;highlighter-rouge&quot;&gt;interface&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;abstract class&lt;/code&gt; as much as possible, or use &lt;code class=&quot;highlighter-rouge&quot;&gt;IoC&lt;/code&gt; containers&lt;/p&gt;

&lt;h2 id=&quot;4-follow-single-responsibility-princple-strictly&quot;&gt;4. Follow &lt;code class=&quot;highlighter-rouge&quot;&gt;Single Responsibility&lt;/code&gt; princple strictly.&lt;/h2&gt;

&lt;p&gt;Your method should handly only one thing, should be used for only one purpose.&lt;/p&gt;

&lt;h2 id=&quot;5-how-to-handle-legacy-code&quot;&gt;5. How to handle legacy code?&lt;/h2&gt;

&lt;p&gt;You are commonly facing a problem that it is pretty hard to write unit test for legacy code, which does not follow rules mentioned above. &lt;code class=&quot;highlighter-rouge&quot;&gt;Refactor&lt;/code&gt; is the only recommend way to fix that issue, but for sure, it takes time.&lt;/p&gt;
</description>
        <pubDate>Wed, 24 Jul 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/07/24/best-practice-for-writting-unit-tests/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/07/24/best-practice-for-writting-unit-tests/</guid>
        
        <category>unit test</category>
        
        
      </item>
    
      <item>
        <title>All kinds of security attacks(TODO)</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Peronsal understandings for some attacks like XSS, CSRF, Sql Injection&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 22 Jul 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/security/2019/07/22/security-attacks/</link>
        <guid isPermaLink="true">http://localhost:4000/security/2019/07/22/security-attacks/</guid>
        
        <category>security</category>
        
        
        <category>security</category>
        
      </item>
    
      <item>
        <title>Autowired</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Some ideas for when and how to use &lt;code class=&quot;highlighter-rouge&quot;&gt;Autowired&lt;/code&gt; annotation in Spring&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are three types of injections withing Spring framework.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Constructor Injection.&lt;/li&gt;
  &lt;li&gt;Setter Injection.&lt;/li&gt;
  &lt;li&gt;Field Injection.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Constructor Injection
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

   &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

   &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Setter Injection
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

   &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

   &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setFoo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Field Injection
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It is apparently that third way is simple, straight forward, but it has a few drawbacks.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It is not friendly for unit test. As you cannot easily mock a &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; and injected into the &lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt; object.&lt;/li&gt;
  &lt;li&gt;You cannot inject an immutable objects, say a final object in Java.&lt;/li&gt;
  &lt;li&gt;With a constructor injection, you may easily find out a code smell issue. E.g. your constructor contains more args than some static code analyzer expected (like SonarQube), then you can refator it accordingly. But with field injection issue, you will not be able to spot that.&lt;/li&gt;
  &lt;li&gt;It violates the encapsulation charactor of the OOP. As the IoC container is changing something which should not be changed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In gereral, it is not recommended to use &lt;code class=&quot;highlighter-rouge&quot;&gt;Autowired&lt;/code&gt; against to fields, but it seems like different people have different ideas, as some Spring examples also use it that way, but based on my understanding, it is not right anyway.&lt;/p&gt;
</description>
        <pubDate>Sun, 21 Jul 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/07/21/autowired/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/07/21/autowired/</guid>
        
        <category>spring</category>
        
        
      </item>
    
      <item>
        <title>Thinkings for architectures(WIP)</title>
        <description>&lt;p&gt;These are a list of architecture related ideas. Audience is not limited to dev, but all kinds of technology related people.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;KISS&lt;/strong&gt; (Keep it simple or stupid). 尽量把软件设计的简单一些，傻瓜一些&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;YAGNI&lt;/strong&gt; (You are’t gonna need it). 别手欠去耍小聪明的设计一些现在并不需要的功能&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Crawl, Walk, Run&lt;/strong&gt; (Make it work, make it better, make it greater). 跟小孩学走路一样，先爬，再走，再跑。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Automation Test&lt;/strong&gt; 自动化测试是构建稳定，高质量软件的重要途径。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;RoI&lt;/strong&gt; (Return of Investment). 考虑你的投资回报率，把好钢用在刀刃上&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;设计和测试尽量分开。测试随着开发进度走，而不是等开发完了一起测试&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MVP&lt;/strong&gt; (minimal viable product) 你永远无法想象客户是怎么使用你的产品的。 先做出来的东西给他看，根据回馈来修改你的产品&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;尽可能少做新功能。对于有疑问的就别做，当然尽可能留一些扩展点&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;需要了解硬件，操作系统，到你的语言平台，这样才能做出更好的架构&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Amdahl Law&lt;/strong&gt; (大意为系统可并行化程度越高，多核越能发挥作用，废话) 多使用异步处理，比如immutable的数据，并行计算，尽量不要使用锁&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;对于一个non-blocking, event driven的系统而言，不要使用锁或其他的IO操作，它会使你的系统慢的跟马一样&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;设计无状态系统，尽量使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Shared Nothing Architecture&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;不能可能实现 &lt;code class=&quot;highlighter-rouge&quot;&gt;exactly once delivery&lt;/code&gt;. 凡是宣称能达到&lt;code class=&quot;highlighter-rouge&quot;&gt;exactly once delivery&lt;/code&gt;的肯定在某些地方做了限制.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;尽可能的把你的系统设计成&lt;code class=&quot;highlighter-rouge&quot;&gt;幂等&lt;/code&gt;的，这样至少可以实现 &lt;code class=&quot;highlighter-rouge&quot;&gt;at least once delivery&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CAP Theorem&lt;/code&gt;. Consistency, Availability, Partition Tolerance, pick any two.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 20 Jul 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/07/20/some-thinkings-for-architecture/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/07/20/some-thinkings-for-architecture/</guid>
        
        <category>architecture</category>
        
        
      </item>
    
      <item>
        <title>Deployment related(WIP)</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;This is a note for popular deployment strategies plus my personal thoughts&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;bluegreen-deployment&quot;&gt;Blue/Green deployment&lt;/h1&gt;

&lt;p&gt;Need to have two identical environments. Let’s call it &lt;code class=&quot;highlighter-rouge&quot;&gt;blue&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;green&lt;/code&gt; enviroments. &lt;code class=&quot;highlighter-rouge&quot;&gt;Blue&lt;/code&gt; is normally running. Upgrade &lt;code class=&quot;highlighter-rouge&quot;&gt;green&lt;/code&gt; environments to the target version, switch network traffics to it, test it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Pros&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;0 Downtime&lt;/li&gt;
  &lt;li&gt;Low risk. Can easily rollback to previous stage&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cons&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Cost increase.&lt;/li&gt;
  &lt;li&gt;Need to handle unfinished transactions when switching network traffic&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;gray-publish-canary-releases&quot;&gt;Gray publish (Canary releases)&lt;/h1&gt;

&lt;p&gt;Pick some candidates out, deploy the new version those those candidate(s), QA verify the change and deploy the change to all left servers/pods if QA shine the green light on.&lt;/p&gt;

&lt;h1 id=&quot;rolling-release&quot;&gt;Rolling release&lt;/h1&gt;

&lt;p&gt;Gradually deploy versions to servers/pods.&lt;/p&gt;

</description>
        <pubDate>Fri, 19 Jul 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/07/19/general-deployment/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/07/19/general-deployment/</guid>
        
        
      </item>
    
      <item>
        <title>Reactive Programming(TODO)</title>
        <description>&lt;h1 id=&quot;reactive-programming&quot;&gt;Reactive Programming&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;What’s reactive programming&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;4 Core Concepts&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Observer&lt;/li&gt;
  &lt;li&gt;Observable&lt;/li&gt;
  &lt;li&gt;Hot VS. Cold Observable&lt;/li&gt;
  &lt;li&gt;Subject Variants&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Observer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 18 Jul 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/07/18/reactive-programming/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/07/18/reactive-programming/</guid>
        
        <category>reactive</category>
        
        
      </item>
    
      <item>
        <title>git diff</title>
        <description>&lt;p&gt;Diff all files in working copy&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;git diff
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Diff all staged files&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;git diff &lt;span class=&quot;nt&quot;&gt;--cached&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Diff specified file&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;git diff file
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 13 Apr 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/git/2016/04/13/git-diff-command/</link>
        <guid isPermaLink="true">http://localhost:4000/git/2016/04/13/git-diff-command/</guid>
        
        
        <category>git</category>
        
      </item>
    
  </channel>
</rss>
